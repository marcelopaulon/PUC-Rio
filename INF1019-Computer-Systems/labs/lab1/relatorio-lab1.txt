Relatório - Laboratório 1

/*
 Gustavo Aranha - 1320755
 Marcelo Paulon - 1411029
*/

1) Faça um programa para criar dois processos, o pai escreve seu pid e espera o filho terminar e o filho escreve o seu pid e termina. 

#include <stdio.h>
#include <sys/wait.h>
#include <unistd.h>

int main(void) {
  int pid = fork();
  int status;

  if(pid == 0) {
    printf("pid filho: %d\n", pid);
  }
  else {
    printf("pid pai: %d\n", pid);
    waitpid(-1, &status, 0);
  }

  return 0;
}

Execução e saída:

./lab1ex1
pid pai: 3551
pid filho: 0

Reflexão: O programa criou um processo filho, onde a valor da variável pid era zero (pois ele é o processo filho) e portanto imprimiu "pid filho: 0". O pai seguiu sua execução, com o valor da variável pid contendo o PID do processo filho, e imprimiu, no caso, "pid pai: 3551", esperando, então, o processo filho terminar, para ele terminar.

2) Agora, usando a mesma estrutura de processos pai e filho, declare uma variável visível ao pai e ao filho, no pai inicialize a variável com1 e imprima seu valor antes do fork(). No filho, altere o valor da variável para 5 e imprima o seu valor antes do exit(). Agora, no pai, imprima novamente o valor da variável após o filho ter alterado a variável - após a waitpid(). Justifique os resultados obtidos.

#include <stdio.h>
#include <sys/wait.h>
#include <unistd.h>

int main(void) {
  int pid = fork();
  int status;

  int variavel = 1;

  if(pid == 0) {
    variavel = 5;
    printf("variavel filho: %d\n", variavel);
  }
  else {
    printf("variavel pai: %d\n", variavel);
    waitpid(-1, &status, 0);
    printf("variavel pai apos execucao do processo filho: %d\n", variavel);
  }

  return 0;
}

Execução e saída:

./lab1ex1
variavel pai: 1
variavel filho: 5
variavel pai apos execucao do processo filho: 1

Reflexão: podemos verificar, que após o processo filho executar, a variável do pai permanece com o mesmo valor. Isto se dá, pois os processos ocorrem em áreas de memória diferentes, portanto, ao alterar a variável no filho, não está se alterando a variável no pai.

3) Use o programa anterior para ler e ordenar um vetor de 10 posições. O filho ordena o vetor e o pai exibe os dados do vetor antes do fork() e depois do waitpid(). Eles usarão o mesmo vetor na memória? Justifique.

#include <stdio.h>
#include <sys/wait.h>
#include <unistd.h>

void imprimeVetor(int list[], int n, char nomeVetor[])
{
  int i;
  printf("%s", nomeVetor);
  for(i = 0; i < n - 1; i++) {
    printf("%d, ", list[i]);
  }
  printf("%d\n", list[n - 1]);
}

void bubble_sort(int list[], int n)
{
  int c, d, t;
 
  for (c = 0 ; c < ( n - 1 ); c++)
  {
    for (d = 0 ; d < n - c - 1; d++)
    {
      if (list[d] > list[d+1])
      {
        /* Swapping */
 
        t         = list[d];
        list[d]   = list[d+1];
        list[d+1] = t;
      }
    }
  }
}

int main(void) {
  int pid = fork();
  int list[10] = {7,6,4,2,10,9,8,1,5,3};
  int status;

  if(pid == 0) {
    bubble_sort(list, 10);
    imprimeVetor(list, 10, "Vetor durante a execucao filho: ");
  }
  else {
    imprimeVetor(list, 10, "Vetor antes da execucao do filho: ");
    waitpid(-1, &status, 0);
    imprimeVetor(list, 10, "Vetor após execucao do filho: ");
  }

  return 0;
}

Execução e saída:

./lab1ex1
Vetor antes da execucao do filho: 7, 6, 4, 2, 10, 9, 8, 1, 5, 3
Vetor durante a execucao filho: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
Vetor após execucao do filho: 7, 6, 4, 2, 10, 9, 8, 1, 5, 3

Reflexão: Durante a execução do filho, o vetor é ordenado. No entanto, como os processos são executados em áreas diferentes de memória, o vetor do pai continua não ordenado.

4) Modifique o programa anterior para que o filho execute um programa elaborado por você, que mande imprimir uma mensagem qualquer no vídeo, por exemplo, “alo mundo”. Em seguida altere o programa do item 4 para o filho executar o programa echo da shell.

Antes da alteração do echo:

#include <stdio.h>
#include <sys/wait.h>
#include <unistd.h>

int main(void) {
  char *argv[] = { "./alomundo" };
  int pid = fork();
  int status;

  if(pid == 0) {
    execve("./alomundo", argv, 0);
  }
  else {
    waitpid(-1, &status, 0);
  }

  return 0;
}

------------

#include <stdio.h>

int main(void) {
  printf("alo mundo\n");
  return 0;
}

Execução e saída:
alo mundo

Após a alteração do echo:

#include <stdio.h>
#include <sys/wait.h>
#include <unistd.h>

int main(void) {
  char *argv[] = { "/bin/echo", "alo mundo", NULL };
  int pid = fork();
  int status;

  if(pid == 0) {
    execve("/bin/echo", argv, 0);
  }
  else {
    waitpid(-1, &status, 0);
  }

  return 0;
}

Execução e saída:
alo mundo

Reflexão: O processo filho executou o programa criado (que imprimia "alo mundo") e após a modificação executou o echo, imprimindo também "alo mundo" pois foi passado através do argv, a string "alo mundo" como parâmetro para o echo.
