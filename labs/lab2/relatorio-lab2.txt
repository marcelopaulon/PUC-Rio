Relatório - Laboratório 2

/*
 Gustavo Aranha - 1320755
 Marcelo Paulon - 1411029
*/

1)Soma de matrizes
Faça um programa para somar matrizes de acordo com o seguinte algoritmo
- O primeiro processo irá criar duas matrizes 
  preenchidas e uma terceira vazia em 3 áreas 
  de memória compartilhada.
- Para cada linha da matriz solução, o seu 
  programa deverá gerar um processo para o 
  seu cálculo.

#include <stdio.h>
#include <stdlib.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>

#define MAT_WIDTH 5
#define MAT_HEIGHT 10

void imprimeMatriz(int ** mat, int width, int height) {
  int i, j;
  for(i = 0; i < height; i++) {
    for(j = 0; j < width; j++) {
      printf("%d ", mat[i][j]);
    }
    printf("\n");
  }
}

void preencheMatriz(int ** mat, int width, int height) {
  int i, j;
  for(i = 0; i < height; i++) {
    for(j = 0; j < width; j++) {
      mat[i][j] = rand() % 100;
    }
  }
}

int alocaMatriz(int width, int height) {
  int **mat, i, j;
  int segmento = shmget(IPC_PRIVATE, sizeof(int *) * MAT_HEIGHT, IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
  int segmentoTemp;

  if(segmento == -1) exit(-1);
  
  mat = (int * *) shmat(segmento, 0, 0);

  for(int i = 0; i < height; i++) {
      segmentoTemp = shmget(IPC_PRIVATE, sizeof(int) * MAT_WIDTH, IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
      mat[i] = (int *) shmat(segmentoTemp, 0, 0);
  }

  return segmento;
}

int main(void) {
  int i, j, pid;
  int segmento1, segmento2, segmento3, *p;
  int **mat1, **mat2, **mat3;
  
  segmento1 = alocaMatriz(MAT_WIDTH, MAT_HEIGHT);
  segmento2 = alocaMatriz(MAT_WIDTH, MAT_HEIGHT);
  segmento3 = alocaMatriz(MAT_WIDTH, MAT_HEIGHT);
  
  mat1 = (int * *) shmat(segmento1, 0, 0);
  preencheMatriz(mat1, MAT_WIDTH, MAT_HEIGHT);

  mat2 = (int * *) shmat(segmento2, 0, 0);
  preencheMatriz(mat2, MAT_WIDTH, MAT_HEIGHT);
 
  mat3 = (int * *) shmat(segmento3, 0, 0);

  printf("Matriz 1: \n");
  imprimeMatriz(mat1, MAT_WIDTH, MAT_HEIGHT);
  
  printf("\nMatriz 2: \n");
  imprimeMatriz(mat2, MAT_WIDTH, MAT_HEIGHT);

  for(i = 0; i < MAT_HEIGHT; i++) {
    pid = fork();
    if(pid == 0) {
      for(j = 0; j < MAT_WIDTH; j++) {
        mat3[i][j] = mat1[i][j] + mat2[i][j];
      }
      exit(0);
    }
    waitpid(-1, NULL, 0);
  }
  
  printf("\nMatriz 3: \n");
  imprimeMatriz(mat3, MAT_WIDTH, MAT_HEIGHT);

  shmdt(mat1);
  shmctl(segmento1, IPC_RMID, 0);

  shmdt(mat2);
  shmctl(segmento2, IPC_RMID, 0);
  
  shmdt(mat3);
  shmctl(segmento3, IPC_RMID, 0);

  return 0;
}

Execução:

Matriz 1: 
83 86 77 15 93 
35 86 92 49 21 
62 27 90 59 63 
26 40 26 72 36 
11 68 67 29 82 
30 62 23 67 35 
29 2 22 58 69 
67 93 56 11 42 
29 73 21 19 84 
37 98 24 15 70 

Matriz 2: 
13 26 91 80 56 
73 62 70 96 81 
5 25 84 27 36 
5 46 29 13 57 
24 95 82 45 14 
67 34 64 43 50 
87 8 76 78 88 
84 3 51 54 99 
32 60 76 68 39 
12 26 86 94 39 

Matriz 3: 
96 112 168 95 149 
108 148 162 145 102 
67 52 174 86 99 
31 86 55 85 93 
35 163 149 74 96 
97 96 87 110 85 
116 10 98 136 157 
151 96 107 65 141 
61 133 97 87 123 
49 124 110 109 109 

Reflexão:

O Programa aloca as 3 matrizes em memória compartilhada, preenchendo a matriz 1 e 2. Depois, para cada linha, cria um processo para executar a soma da linha e espera seu término. Ao fim do programa, a matriz 3 é exibida, contendo a soma das matrizes 1 e 2.

2) Mensagem do Dia
Faça um programa que:
- Leia uma mensagem do dia
- Crie uma memória compartilhada com a chave 8752
- Salve a mensagem na memória
- Faça um outro programa que utilize a mesma 
  chave (8752) e exiba a mensagem do dia 
  para o usuário

Primeiro programa:
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>

int main(void) {
  char *str = "Olar, sou o gustavo fring";
  char *shmString;
  int segmento = shmget(8752, sizeof(char) * (strlen(str) + 1), IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);

  if(segmento == -1) {
    printf("Erro!\n");
    exit(-1);
  }

  shmString = (char *) shmat(segmento, 0, 0);
  sprintf(shmString, str);
  
  shmdt(shmString);

  return 0;
}

Segundo programa:
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>

int main(void) {
  char *str = "Olar, sou o gustavo fring";
  char *shmString;

  int segmento = shmget(8752, sizeof(char) * strlen(str) + 1, S_IRUSR | S_IWUSR);

  if(segmento == -1) {
    printf("Erro!\n");
    exit(-1);
  }

  shmString = (char *) shmat(segmento, 0, 0);
  printf("%s", shmString);

  shmdt(shmString);
  shmctl(segmento, IPC_RMID, 0);

  return 0;
}

Execução:
./programa1
./programa2
Olar, sou o gustavo fring

Reflexão:
O programa1 escreve a string na memória (chave 8752), e o programa2 lê este mesmo local (chave 8752), imprimindo a mesma string.

3) Busca paralela em vetor
Faça um programa paralelo para localizar uma chave em um vetor.
- Crie uma memória compartilhada com dados numéricos inteiros e desordenados e a divida pelo número de processos
- Cada processo deve procurar o dado na sua área de memória e informar a posição onde o dado foi localizado.

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>

int main(void) {
  int *vet;
  int i, *encontrado;
  int pid, pid2;
  int segmento = shmget (IPC_PRIVATE, sizeof(int) * 6, IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);

  int segmentoEncontrado = shmget (IPC_PRIVATE, sizeof(int), IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);

  if(segmento == -1 || segmentoEncontrado == -1) {
    printf("Erro!");
    exit(-1);
  }

  vet = (int *) shmat(segmento, 0, 0);
  encontrado = (int *) shmat(segmentoEncontrado, 0, 0);
  *encontrado = -1;

  vet[0] = 2;
  vet[1]= 4;
  vet[2] = 3;
  vet[3] = 2;
  vet[4] = 5;
  vet[5] = 2;

  pid = fork();

  if(pid == 0) {
    for(i = 3; i < 6; i++) {
      if(vet[i] == 2) {
        *encontrado = 1;
        printf("Valor 2 encontrado na posicao %d!\n", i);
      }
    }
    return 0;
  }

  pid2 = fork();

  if(pid2 == 0) {
    for(i = 0; i < 3; i++) {
      if(vet[i] == 2) {
        *encontrado = 1;
        printf("Valor 2 encontrado na posicao %d!\n", i);
      }
    }
    return 0;
  }

  waitpid(pid, NULL, 0);
  waitpid(pid2, NULL, 0);

  if(*encontrado == -1) {
    printf("Nao encontrado! :(\n");
  }

  shmdt(vet);
  shmctl(segmento, IPC_RMID, 0);

  shmdt(encontrado);
  shmctl(segmentoEncontrado, IPC_RMID, 0);

  return 0;
}

Execução:
Valor 2 encontrado na posicao 3!
Valor 2 encontrado na posicao 5!
Valor 2 encontrado na posicao 0!

Reflexão:
O programa aloca um vetor de 6 posições na memória compartilhada, e cria 2 processos filhos. Em um dos processos, é buscado da posição 1 a 3, no outro, de 4 a 6. O Programa encontra, então, o valor 2, nas posições 3, 5, e 0, conforme esperado. Se não fosse encontrado o valor 2 em nenhuma das posições do vetor, seria exibido "Não encontrado! :(".

