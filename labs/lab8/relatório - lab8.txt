Relatório - Laboratório 8

/*
   Gustavo Aranha - 1320755
   Marcelo Paulon - 1411029
*/

1) Implemente um programa que crie 2 threads:  Uma delas (contCrescente) contará de 1 a N=20 (com pausas de T1=1 segundo).  A outra (contDecrescente) de M=30 a 1 (com pausas de T2=2 segundos). 
Compile com a opção –l pthread  

ex1.c
--

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#define NUM_THREADS 2

void *contCrescente()
{
   int i;
   for(i=1;i<=20;i++)
   {
	printf("%d\n", i);
	sleep(1);
   }
   pthread_exit(NULL);
}

void *contDecrescente()
{
   int i;
   for(i=30;i>=1;i--)
   {
	printf("%d\n", i);
	sleep(2);
   }
   pthread_exit(NULL);
}



int main(void)
{
   pthread_t threads[NUM_THREADS];
   int i=0;
   printf("Criando thread %d\n",i);
   pthread_create(&threads[i], NULL, contCrescente, NULL);
   i++;
   printf("Criando thread %d\n",i);
   pthread_create(&threads[i], NULL, contDecrescente, NULL);
   
   for(i=0;i<NUM_THREADS;i++)
   {
	pthread_join(threads[i],NULL);
   }
   return 0;
}

Execução:
./ex1
Criando thread 0
Criando thread 1
1
30
2
29
3
4
28
5
6
27
7
8
26
9
10
25
11
12
24
13
14
23
15
16
22
17
18
21
19
20
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1


Reflexão: O programa criou as duas threads (0 e 1) e iniciou as funções contCrescente() na thread 0 e contDecrescente() na thread 1. Foi possível observar que ambas são executadas concorrentemente, como mostra o output (função contCrescente imprimindo a cada 1 segundo, função contDecrescente imprimindo a cada 2 segundos).

2)Acrescente agora uma variável global inteira que é inicializada com zero, incrementada e impressa na tela por cada thread. Verifique que ambas as threads manipulam a mesma variável. 

ex2.c
--

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#define NUM_THREADS 2

static int var=0;

void *contCrescente()
{
   int i;
   for(i=1;i<=20;i++)
   {
	var++;
	printf("%d - %d\n",var, i);
	sleep(1);
   }
   pthread_exit(NULL);
}

void *contDecrescente()
{
   int i;
   for(i=30;i>=1;i--)
   {
	var++;
	printf("%d - %d\n",var, i);
	sleep(2);
   }
   pthread_exit(NULL);
}



int main(void)
{
   pthread_t threads[NUM_THREADS];
   int i=0;
   printf("Criando thread %d\n",i);
   pthread_create(&threads[i], NULL, contCrescente, NULL);
   i++;
   printf("Criando thread %d\n",i);
   pthread_create(&threads[i], NULL, contDecrescente, NULL);
   
   for(i=0;i<NUM_THREADS;i++)
   {
	pthread_join(threads[i],NULL);
   }
   return 0;
}

Execução:
./ex2
Criando thread 0
Criando thread 1
1 - 1
2 - 30
3 - 2
4 - 29
5 - 3
6 - 4
7 - 28
8 - 5
9 - 6
10 - 27
11 - 7
12 - 8
13 - 26
14 - 9
15 - 10
16 - 25
17 - 11
18 - 12
19 - 24
20 - 13
21 - 14
22 - 23
23 - 15
24 - 16
25 - 22
26 - 17
27 - 18
28 - 21
29 - 19
30 - 20
31 - 20
32 - 19
33 - 18
34 - 17
35 - 16
36 - 15
37 - 14
38 - 13
39 - 12
40 - 11
41 - 10
42 - 9
43 - 8
44 - 7
45 - 6
46 - 5
47 - 4
48 - 3
49 - 2
50 - 1


Reflexão: Foi inicializada a variável global var como 0, que foi incrementada de 1 a cada operação de decremento/incremento. Como o valor de var foi impresso antes do valor da contagem impressa por cada função, podemos verificar que ambas as threads manipularam de forma concorrente a mesma variável (já que ao final var = 50, como esperado).

3) Usando threads, escreva um programa C que implemente o problema do produtor/consumidor. O produtor e o consumidor devem ser threads de execução dentro do mesmo processo compartilhando os recursos do processo. O produtor deve produzir dados (números inteiros pseudo-aleatórios) a cada 1 segundo colocando-os em uma fila (buffer, implementação circular). O consumidor deve retirar dados da fila a cada 2 segundos. O tamanho máximo da fila deve ser de 8 elementos (MAXFILA) e tanto o produtor como o consumidor devem produzir/consumir 64 elementos (números inteiros de 1 a 64, por exemplo) evitando condições de corrida. Variáveis compartilhadas entre threads são simplesmente variáveis globais. 
Para compilar o programa, utilize a opção -lpthread

ex3.c
--
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#define NUM_THREADS 2

#define MAXFILA 8

#define NUMPRODUTOS 64

static int fila[MAXFILA];

void *produtor()
{
   int i;
   int prods = 0;

   for(;;)
   {
     for(i=0;i < MAXFILA;i++)
     {
       if(fila[i] == -1)
       {
         prods++;
         fila[i] = rand() % 64 + 1;
         sleep(1);
       }
     }

     if(prods == 64) break;
   }

   printf("Thread produtor terminou\n");

   pthread_exit(NULL);
}

void *consumidor()
{
   int i;
   int prods = 0;

   for(;;)
   {
     for(i=0;i < MAXFILA;i++)
     {
       if(fila[i] != -1)
       {
         printf("%d consumido\n", fila[i]);
         fila[i] = -1;
         prods++;
         sleep(2);
       }
     }

     if(prods == 64) break;
   }

   printf("Thread consumidor terminou\n");
   pthread_exit(NULL);
}

void inicializaFila()
{
  int i;
  for(i = 0; i < MAXFILA; i++)
  {
    fila[i] = -1;
  }
}

int main(void)
{
   srand(time(NULL));
   pthread_t threads[NUM_THREADS];
   int i=0;

   inicializaFila();

   printf("Criando thread %d\n",i);
   pthread_create(&threads[i], NULL, produtor, NULL);
   i++;
   printf("Criando thread %d\n",i);
   pthread_create(&threads[i], NULL, consumidor, NULL);
   
   for(i=0;i<NUM_THREADS;i++)
   {
	pthread_join(threads[i],NULL);
   }
   return 0;
}

Execução:
./ex3
Criando thread 0
Criando thread 1
15 consumido
57 consumido
23 consumido
41 consumido
43 consumido
50 consumido
24 consumido
36 consumido
60 consumido
5 consumido
55 consumido
50 consumido
57 consumido
21 consumido
33 consumido
23 consumido
53 consumido
60 consumido
34 consumido
64 consumido
30 consumido
21 consumido
18 consumido
20 consumido
47 consumido
54 consumido
28 consumido
3 consumido
24 consumido
57 consumido
27 consumido
38 consumido
49 consumido
49 consumido
14 consumido
28 consumido
34 consumido
38 consumido
63 consumido
29 consumido
42 consumido
53 consumido
15 consumido
34 consumido
9 consumido
47 consumido
56 consumido
62 consumido
43 consumido
25 consumido
61 consumido
8 consumido
45 consumido
14 consumido
27 consumido
27 consumido
Thread produtor terminou
3 consumido
54 consumido
29 consumido
26 consumido
46 consumido
56 consumido
63 consumido
31 consumido
Thread consumidor terminou


Reflexão: O programa ex3 inicializou a fila de inteiros, de tamanho 8, como -1. Criou 2 threads, executando as funções produtor() na thread produtor e consumidor() na thread consumidor. A função produtor gerou 64 números aleatórios de 1-64, colocando-os na fila, quando possível (quando houvesse uma posição cujo valor fosse diferente de -1). A função consumidor obteve 64 números da fila, quando estes eram diferentes de -1, e os imprimiu. Com isto, podemos perceber que foram produzidos 64 números pela função produtor, e estes 64 números foram consumidos pela função consumidor, conforme esperado.
