regras:
i) fmap id = id
ii) fmap (f.g) = fmap f.fmap g
iii) join.fmap unit = id
iv) join.unit = id
v) unit.f = fmap f.unit
vi) join.fmap join = join.join
vii) join.fmap (fmap f) = fmap f.join

definições:
fmap f x = x >>= (return.f)
join x = (x >>= id)
x >>= f = join (fmap f x)
unit = return

Queremos provar que:

a) return x >>= f = f x
return x >>= f == definição de unit
unit x >> f == definição de >>=
join (fmap f (unit x)) == definição de "."
join (fmap f.unit x) == regra v)
join (unit.f x) == definição de "."
join.unit.f x == regra iv)
id.f x == definição de "."
id (f x) == definição de id
f x
⬛

b) x >>= return = x
x >>= return == definição de unit
x >>= unit == definição de >>=
join (fmap unit x) == definição de "."
join.fmap unit x == regra iii)
id x == definição de id
x
⬛

c) (x >>= f) >>= g = x >>= (\v -> (f v) >>= g)
(x >>= f) >>= g == associatividade de >>=
x >>= (f >>= g) == definição de >>=
join (fmap (f >>= g) x) == definição de >>=
join (fmap (join (fmap g f)) x)
-------
x >>= (\v -> (f v) >>= g) == definição de >>=
join (fmap (\v -> (f v) >>= g) x) == redução eta
join (fmap (f >>= g) x) == definição de >>=
join (fmap (join (fmap g f)) x)
⬛
